generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

generator zod {
  provider = "npx zod-prisma-types"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String  @id @default(cuid())
  clerkId         String? @unique
  email           String  @unique
  firstName       String?
  lastName        String?
  fullName        String?
  profileImageUrl String?

  trips Trip[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trip {
  id              String   @id @default(cuid())
  userId          String
  title           String
  description     String[]
  location        String
  travelGroup     String
  style           String
  duration        Int
  budget          String
  estimatedTotal  Int
  bestTimeToVisit Json
  weatherInfo     Json
  generalLocation Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotels        Hotel[]
  itineraryDays ItineraryDay[]
  tripImages    TripImage[]
}

model TripImage {
  id          String      @id @default(cuid())
  tripId      String
  ImageUrl    String
  source      ImageSource
  description String?

  Trip Trip @relation(fields: [tripId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hotel {
  id                     String  @id @default(cuid())
  tripId                 String
  hotelName              String
  address                String
  description            String
  estimatedPricePerNight Float
  rating                 Float
  latitude               Float
  longitude              Float
  imageUrl               String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip Trip @relation(fields: [tripId], references: [id])
}

model ItineraryDay {
  id        String @id @default(cuid())
  tripId    String
  dayNumber Int
  location  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip       Trip                @relation(fields: [tripId], references: [id])
  activities ItineraryActivity[]
}

model ItineraryActivity {
  id                  String  @id @default(cuid())
  itineraryDayId      String
  placeName           String
  placeDetails        String
  imageUrl            String? // resolved via Google API
  latitude            Float
  longitude           Float
  ticketPrice         Float
  rating              Float
  timeOfDay           String // morning, afternoon, evening
  estimatedTravelTime Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  itineraryDay ItineraryDay @relation(fields: [itineraryDayId], references: [id])
}

enum ImageSource {
  UNSPLASH
  GOOGLE_PLACES
  CUSTOM
}
